-- Zad1
CREATE OR REPLACE PROCEDURE NowyPracownik
(vName PRACOWNICY.NAZWISKO%TYPE,
 vTeam ZESPOLY.NAZWA%TYPE,
 vBoss PRACOWNICY.NAZWISKO%TYPE,
 vSalary PRACOWNICY.PLACA_POD%TYPE) IS
 vPosition PRACOWNICY.ETAT%TYPE DEFAULT 'STAZYSTA';
 vDate PRACOWNICY.ZATRUDNIONY%TYPE DEFAULT CURRENT_DATE;
 vID PRACOWNICY.ID_PRAC%TYPE;
 vBossID PRACOWNICY.ID_PRAC%TYPE;
 vTeamID ZESPOLY.ID_ZESP%TYPE;
BEGIN
 SELECT MAX(ID_PRAC)+10 INTO vID FROM PRACOWNICY;
 SELECT ID_PRAC INTO vBossID FROM PRACOWNICY WHERE NAZWISKO=vBoss;
 SELECT ID_ZESP INTO vTeamID FROM ZESPOLY WHERE NAZWA=vTeam;
 INSERT INTO PRACOWNICY(ID_PRAC, NAZWISKO, ETAT, ID_SZEFA, ZATRUDNIONY, PLACA_POD, ID_ZESP) VALUES(vID, vName, vPosition, vBossID, vDate, vSalary, vTeamID);
END NowyPracownik;

EXEC NowyPracownik('DYNDALSKI', 'ALGORYTMY', 'BLAZEWICZ', 250);

--Zad2
CREATE OR REPLACE FUNCTION PlacaNetto(
    vSalary IN NUMBER,
    vTax IN NATURAL DEFAULT 20)
    RETURN NUMBER IS
BEGIN
    RETURN vSalary*((100-vTax)/100);
END PlacaNetto;

--Zad3
CREATE OR REPLACE FUNCTION Silnia(
    vN IN PLS_INTEGER)
    RETURN PLS_INTEGER IS
    vTemp PLS_INTEGER := vN;
    vRes PLS_INTEGER := vN;
BEGIN
    IF vN < 0 THEN
        RETURN NULL;
    ELSIF vN < 2 THEN
        RETURN 1;
    ELSE
        WHILE vTemp != 1 LOOP
            vTemp := vTemp - 1;
            vRes := vRes * vTemp;
        END LOOP;
        RETURN vRes;
    END IF;
END Silnia;

--Zad4
CREATE OR REPLACE FUNCTION SilniaRek(
    vN IN PLS_INTEGER)
    RETURN PLS_INTEGER IS
BEGIN
    IF vN < 0 THEN
        RETURN NULL;
    ELSIF vN < 2 THEN
        RETURN 1;
    ELSE
        RETURN vN*SilniaRek(vN-1);
    END IF;
END SilniaRek;

--Zad5
CREATE OR REPLACE FUNCTION IleLat(
    vDate IN DATE)
    RETURN NUMBER IS
BEGIN
    RETURN EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM vDate);
END IleLat;

--Zad6
CREATE OR REPLACE PACKAGE Konwersja IS
    FUNCTION Cels_To_Fahr(Tc NUMBER)
        RETURN NUMBER;
    FUNCTION Fahr_To_Cels(Tf NUMBER)
        RETURN NUMBER;
END Konwersja;

CREATE OR REPLACE PACKAGE BODY Konwersja IS
    FUNCTION Cels_To_Fahr(Tc NUMBER) RETURN NUMBER IS
        BEGIN
            RETURN Tc*9/5+ 32;
        END Cels_To_Fahr;
    FUNCTION Fahr_To_Cels(Tf NUMBER) RETURN NUMBER IS
        BEGIN
            RETURN (Tf-32)*5/9;
        END Fahr_To_Cels;
END Konwersja;

--Zad7
CREATE OR REPLACE PACKAGE Zmienne IS
    vLicznik NUMBER := 0;
    PROCEDURE ZwiekszLicznik;
    PROCEDURE ZmniejszLicznik;
    FUNCTION PokazLicznik
        RETURN NATURAL;
END Zmienne;

CREATE OR REPLACE PACKAGE BODY Zmienne IS
    PROCEDURE ZwiekszLicznik IS
        BEGIN
            vLicznik := vLicznik +1;
            DBMS_OUTPUT.PUT_LINE('Zwiekszono');
        END ZwiekszLicznik;
    PROCEDURE ZmniejszLicznik IS
        BEGIN
            vLicznik := vLicznik - 1;
            DBMS_OUTPUT.PUT_LINE('Zmniejszono');
        END ZmniejszLicznik;
    FUNCTION PokazLicznik RETURN NATURAL IS
        BEGIN
            RETURN vLicznik;
        END PokazLicznik;
    BEGIN
        vLicznik := 1;
        DBMS_OUTPUT.PUT_LINE('Zainicjalizowano');
END Zmienne;

--Zad8
CREATE OR REPLACE PACKAGE IntZespoly IS
    PROCEDURE NowyZespol(vID ZESPOLY.ID_ZESP%TYPE, vNazwa ZESPOLY.NAZWA%TYPE, vAdres ZESPOLY.ADRES%TYPE);
    PROCEDURE UsunZespolID(vID ZESPOLY.ID_ZESP%TYPE);
    PROCEDURE UsunZespolNazwa(vNazwa ZESPOLY.NAZWA%TYPE);
    PROCEDURE EdytujZespol(vID ZESPOLY.ID_ZESP%TYPE, vNazwa ZESPOLY.NAZWA%TYPE, vAdres ZESPOLY.ADRES%TYPE);
    FUNCTION IdentyfikatorZespolu(vNazwa ZESPOLY.NAZWA%TYPE) RETURN ZESPOLY.ID_ZESP%TYPE;
    FUNCTION NazwaZespolu(vID ZESPOLY.ID_ZESP%TYPE) RETURN ZESPOLY.NAZWA%TYPE;
    FUNCTION AdresZespolu(vID ZESPOLY.ID_ZESP%TYPE) RETURN ZESPOLY.ADRES%TYPE;
END IntZespoly;

CREATE OR REPLACE PACKAGE BODY IntZespoly IS
    PROCEDURE NowyZespol(vID ZESPOLY.ID_ZESP%TYPE, vNazwa ZESPOLY.NAZWA%TYPE, vAdres ZESPOLY.ADRES%TYPE) IS BEGIN
        INSERT INTO ZESPOLY VALUES(vID, vNazwa, vAdres);
    END NowyZespol;

    PROCEDURE UsunZespolID(vID ZESPOLY.ID_ZESP%TYPE) IS BEGIN
        DELETE FROM ZESPOLY WHERE ID_ZESP = vID;
    END UsunZespolID;

    PROCEDURE UsunZespolNazwa(vNazwa ZESPOLY.NAZWA%TYPE) IS BEGIN
        DELETE FROM ZESPOLY WHERE NAZWA = vNazwa;
    END UsunZespolNazwa;

    PROCEDURE EdytujZespol(vID ZESPOLY.ID_ZESP%TYPE, vNazwa ZESPOLY.NAZWA%TYPE, vAdres ZESPOLY.ADRES%TYPE) IS BEGIN
        UPDATE ZESPOLY SET NAZWA = vNazwa, ADRES = vAdres WHERE ID_ZESP = vID;
    END EdytujZespol;

    FUNCTION IdentyfikatorZespolu(vNazwa ZESPOLY.NAZWA%TYPE) RETURN ZESPOLY.ID_ZESP%TYPE IS
        vID ZESPOLY.ID_ZESP%TYPE;
    BEGIN
        SELECT ID_ZESP INTO vID FROM ZESPOLY WHERE NAZWA = vNazwa;
        RETURN vID;
    END IdentyfikatorZespolu;

    FUNCTION NazwaZespolu(vID ZESPOLY.ID_ZESP%TYPE) RETURN ZESPOLY.NAZWA%TYPE IS
        vNazwa ZESPOLY.NAZWA%TYPE;
    BEGIN
        SELECT NAZWA INTO vNazwa FROM ZESPOLY WHERE ID_ZESP = vID;
        RETURN vNazwa;
    END NazwaZespolu;

    FUNCTION AdresZespolu(vID ZESPOLY.ID_ZESP%TYPE) RETURN ZESPOLY.ADRES%TYPE IS
        vAdres ZESPOLY.ADRES%TYPE;
    BEGIN
        SELECT ADRES INTO vAdres FROM ZESPOLY WHERE ID_ZESP = vID;
        RETURN vAdres;
    END;
END IntZespoly;

--Zad9
SELECT object_name, status
FROM User_Objects
WHERE object_type IN ('PROCEDURE', 'FUNCTION', 'PACKAGE_BODY');

SELECT * FROM User_Source;

--Zad10
DROP FUNCTION Silnia;
DROP FUNCTION SilniaRek;
DROP FUNCTION IleLat;

--Zad11.
DROP PACKAGE Konwersja;
